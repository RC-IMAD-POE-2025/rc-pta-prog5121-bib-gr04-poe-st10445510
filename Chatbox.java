
package Register3;
import javax.swing.JOptionPane;
import Register3.userdatabase;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import Register3.Message;
import javax.swing.JOptionPane;


public class Chatbox extends javax.swing.JFrame {

    private String loggedInUsername;

   
    public Chatbox(String username) {
        initComponents();
        this.loggedInUsername=username;
      
        String firstname=userdatascore.userFirstname.get(loggedInUsername);
        String lastname=userdatascore.userLastname.get(loggedInUsername);
        lblwelcomeUser.setText("Welcome " + firstname + " " + lastname + " it is great to see you. ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblwelcomeUser = new javax.swing.JLabel();
        btnQuickChatMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblwelcomeUser.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblwelcomeUser.setText("Chatbox");

        btnQuickChatMenu.setText("Enter");
        btnQuickChatMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuickChatMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(488, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnQuickChatMenu)
                        .addGap(211, 211, 211))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblwelcomeUser)
                        .addGap(201, 201, 201))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(lblwelcomeUser)
                .addGap(180, 180, 180)
                .addComponent(btnQuickChatMenu)
                .addContainerGap(237, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuickChatMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuickChatMenuActionPerformed
        Object[] options={"1.Send Message " , "2.Show recently send messages " , "3.Quit"};
        int choice = JOptionPane.showOptionDialog(
                this ,
                "Please select an option from the menu:",
                "QuickChat Main Menu",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                options,
                options[0]
        );
        switch(choice){
            case 0:
                sendMessagesFunction();
                
                break;
            case 1:
                JOptionPane.showMessageDialog(this, "Coming Soon." , "Feature still under development",JOptionPane.INFORMATION_MESSAGE);
                break;
            case 2:
                int confirm=JOptionPane.showConfirmDialog(this, "Are you sure you want to quit Quickchat?","confirm Quit",JOptionPane.YES_NO_OPTION);
                if(confirm==JOptionPane.YES_OPTION){
                    this.dispose();
                    System.exit(0);
                }
                    break;
            case JOptionPane.CLOSED_OPTION:
                JOptionPane.showMessageDialog(this,"Menu closed.No action taken.");
           
                }
    }
        private void sendMessagesFunction() {
        //
      
    String numMessagesStr = JOptionPane.showInputDialog(this, "How many messages do you wish to send?");
    if (numMessagesStr == null || numMessagesStr.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Message sending cancelled.");
        return;
    }

    int numberOfMessages;
    try {
        numberOfMessages = Integer.parseInt(numMessagesStr.trim());
        if (numberOfMessages <= 0) {
            JOptionPane.showMessageDialog(this, "Please enter a positive number of messages.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid number entered. Please enter a numeric value.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    for (int i = 0; i < numberOfMessages; i++) {
        JOptionPane.showMessageDialog(this, "Entering Message " + (i + 1) + " of " + numberOfMessages);

        String recipient = JOptionPane.showInputDialog(this, "Enter recipient's cell number (e.g., +27123456789):");
        if (recipient == null || recipient.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Recipient input cancelled or empty. Skipping to next message.", "Warning", JOptionPane.WARNING_MESSAGE);
            continue;
        }
        recipient = recipient.trim();

        if (!Message.checkRecipientCell(recipient)) {
            JOptionPane.showMessageDialog(this, "Recipient cell number incorrect: must be '+27' followed by 9 digits (e.g., +27123456789).", "Input Error", JOptionPane.ERROR_MESSAGE);
            continue;
        }

        String messageContent = JOptionPane.showInputDialog(this, "Enter message content (max 250 characters):");
        if (messageContent == null || messageContent.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Message content input cancelled or empty. Skipping to next message.", "Warning", JOptionPane.WARNING_MESSAGE);
            continue;
        }
        messageContent = messageContent.trim();

        if (!Message.checkMessageContentLength(messageContent)) {
            JOptionPane.showMessageDialog(this, "Please enter a message of less than 250 characters.", "Input Error", JOptionPane.ERROR_MESSAGE);
            continue;
        }

        
        Message currentMessage = new Message(loggedInUsername, recipient, messageContent);

        
        Object[] messageOptions = {"Send Message", "Disregard Message", "Store Message"};
        int userChoice = JOptionPane.showOptionDialog(
                this,
                "Choose what you want to do with this message:\n" + currentMessage.toString(),
                "Message Action",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                messageOptions,
                messageOptions[0]
        );

        switch (userChoice) {
            case 0:
                Message.sendMessage(currentMessage);
                JOptionPane.showMessageDialog(this, currentMessage.toString(), "Message Sent", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1: 
                JOptionPane.showMessageDialog(this, "Message disregarded.", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 2: 
                Message.storeMessage(currentMessage);
                JOptionPane.showMessageDialog(this, "Message stored for later.", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(this, "No action is taken on the message.", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }
   
    JOptionPane.showMessageDialog(this, "Total messages: " + Message.returnTotalMessages(), "Total Messages Sent", JOptionPane.INFORMATION_MESSAGE);



        


    }//GEN-LAST:event_btnQuickChatMenuActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chatbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chatbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chatbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chatbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chatbox("Quickchat").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnQuickChatMenu;
    private javax.swing.JLabel lblwelcomeUser;
    // End of variables declaration//GEN-END:variables
}
